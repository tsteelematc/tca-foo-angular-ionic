{"version":3,"file":"default-src_app_game_service_ts.js","mappings":";;;;;;;;;;;;;;AAAwD;AACjD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA,kCAAkC,yMAAyM;AAC3O,+BAA+B,sCAAsC;AACrE,CAAC;AACD;AACA,mHAAmH,oDAAa,KAAK,6CAAM,wCAAwC,6BAA6B;AAChN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gBAAgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gBAAgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gBAAgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gBAAgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA,8BAA8B,+CAAQ,kCAAkC,gBAAgB;AACxF,yBAAyB,6CAAM;AAC/B;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,KAAK;AACL,CAAC;AACD,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,sCAAsC,UAAU,YAAY;AAC5D,4CAA4C,UAAU,SAAS;AAC/D,4CAA4C,UAAU,oBAAoB;AAC1E,4CAA4C,UAAU,oBAAoB;AAC1E;AACA;AACA;AACA;AACA;AACA,8BAA8B,wBAAwB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","sources":["./node_modules/@aws-sdk/util-dynamodb/dist-es/convertToAttr.js","./node_modules/@aws-sdk/util-dynamodb/dist-es/convertToNative.js","./node_modules/@aws-sdk/util-dynamodb/dist-es/index.js","./node_modules/@aws-sdk/util-dynamodb/dist-es/marshall.js","./node_modules/@aws-sdk/util-dynamodb/dist-es/models.js","./node_modules/@aws-sdk/util-dynamodb/dist-es/unmarshall.js","./src/app/TcaCloudApi.js","./src/app/game.service.ts"],"sourcesContent":["import { __read, __spreadArray, __values } from \"tslib\";\nexport var convertToAttr = function (data, options) {\n    var _a, _b, _c, _d, _e, _f;\n    if (data === undefined) {\n        throw new Error(\"Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.\");\n    }\n    else if (data === null && typeof data === \"object\") {\n        return convertToNullAttr();\n    }\n    else if (Array.isArray(data)) {\n        return convertToListAttr(data, options);\n    }\n    else if (((_a = data === null || data === void 0 ? void 0 : data.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"Set\") {\n        return convertToSetAttr(data, options);\n    }\n    else if (((_b = data === null || data === void 0 ? void 0 : data.constructor) === null || _b === void 0 ? void 0 : _b.name) === \"Map\") {\n        return convertToMapAttrFromIterable(data, options);\n    }\n    else if (((_c = data === null || data === void 0 ? void 0 : data.constructor) === null || _c === void 0 ? void 0 : _c.name) === \"Object\" ||\n        (!data.constructor && typeof data === \"object\")) {\n        return convertToMapAttrFromEnumerableProps(data, options);\n    }\n    else if (isBinary(data)) {\n        if (data.length === 0 && (options === null || options === void 0 ? void 0 : options.convertEmptyValues)) {\n            return convertToNullAttr();\n        }\n        return convertToBinaryAttr(data);\n    }\n    else if (typeof data === \"boolean\" || ((_d = data === null || data === void 0 ? void 0 : data.constructor) === null || _d === void 0 ? void 0 : _d.name) === \"Boolean\") {\n        return { BOOL: data.valueOf() };\n    }\n    else if (typeof data === \"number\" || ((_e = data === null || data === void 0 ? void 0 : data.constructor) === null || _e === void 0 ? void 0 : _e.name) === \"Number\") {\n        return convertToNumberAttr(data);\n    }\n    else if (typeof data === \"bigint\") {\n        return convertToBigIntAttr(data);\n    }\n    else if (typeof data === \"string\" || ((_f = data === null || data === void 0 ? void 0 : data.constructor) === null || _f === void 0 ? void 0 : _f.name) === \"String\") {\n        if (data.length === 0 && (options === null || options === void 0 ? void 0 : options.convertEmptyValues)) {\n            return convertToNullAttr();\n        }\n        return convertToStringAttr(data);\n    }\n    else if ((options === null || options === void 0 ? void 0 : options.convertClassInstanceToMap) && typeof data === \"object\") {\n        return convertToMapAttrFromEnumerableProps(data, options);\n    }\n    throw new Error(\"Unsupported type passed: \".concat(data, \". Pass options.convertClassInstanceToMap=true to marshall typeof object as map attribute.\"));\n};\nvar convertToListAttr = function (data, options) { return ({\n    L: data\n        .filter(function (item) { return !(options === null || options === void 0 ? void 0 : options.removeUndefinedValues) || ((options === null || options === void 0 ? void 0 : options.removeUndefinedValues) && item !== undefined); })\n        .map(function (item) { return convertToAttr(item, options); }),\n}); };\nvar convertToSetAttr = function (set, options) {\n    var setToOperate = (options === null || options === void 0 ? void 0 : options.removeUndefinedValues) ? new Set(__spreadArray([], __read(set), false).filter(function (value) { return value !== undefined; })) : set;\n    if (!(options === null || options === void 0 ? void 0 : options.removeUndefinedValues) && setToOperate.has(undefined)) {\n        throw new Error(\"Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.\");\n    }\n    if (setToOperate.size === 0) {\n        if (options === null || options === void 0 ? void 0 : options.convertEmptyValues) {\n            return convertToNullAttr();\n        }\n        throw new Error(\"Pass a non-empty set, or options.convertEmptyValues=true.\");\n    }\n    var item = setToOperate.values().next().value;\n    if (typeof item === \"number\") {\n        return {\n            NS: Array.from(setToOperate)\n                .map(convertToNumberAttr)\n                .map(function (item) { return item.N; }),\n        };\n    }\n    else if (typeof item === \"bigint\") {\n        return {\n            NS: Array.from(setToOperate)\n                .map(convertToBigIntAttr)\n                .map(function (item) { return item.N; }),\n        };\n    }\n    else if (typeof item === \"string\") {\n        return {\n            SS: Array.from(setToOperate)\n                .map(convertToStringAttr)\n                .map(function (item) { return item.S; }),\n        };\n    }\n    else if (isBinary(item)) {\n        return {\n            BS: Array.from(setToOperate)\n                .map(convertToBinaryAttr)\n                .map(function (item) { return item.B; }),\n        };\n    }\n    else {\n        throw new Error(\"Only Number Set (NS), Binary Set (BS) or String Set (SS) are allowed.\");\n    }\n};\nvar convertToMapAttrFromIterable = function (data, options) { return ({\n    M: (function (data) {\n        var e_1, _a;\n        var map = {};\n        try {\n            for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {\n                var _b = __read(data_1_1.value, 2), key = _b[0], value = _b[1];\n                if (typeof value !== \"function\" && (value !== undefined || !(options === null || options === void 0 ? void 0 : options.removeUndefinedValues))) {\n                    map[key] = convertToAttr(value, options);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return map;\n    })(data),\n}); };\nvar convertToMapAttrFromEnumerableProps = function (data, options) { return ({\n    M: (function (data) {\n        var map = {};\n        for (var key in data) {\n            var value = data[key];\n            if (typeof value !== \"function\" && (value !== undefined || !(options === null || options === void 0 ? void 0 : options.removeUndefinedValues))) {\n                map[key] = convertToAttr(value, options);\n            }\n        }\n        return map;\n    })(data),\n}); };\nvar convertToNullAttr = function () { return ({ NULL: true }); };\nvar convertToBinaryAttr = function (data) { return ({ B: data }); };\nvar convertToStringAttr = function (data) { return ({ S: data.toString() }); };\nvar convertToBigIntAttr = function (data) { return ({ N: data.toString() }); };\nvar validateBigIntAndThrow = function (errorPrefix) {\n    throw new Error(\"\".concat(errorPrefix, \" \").concat(typeof BigInt === \"function\" ? \"Use BigInt.\" : \"Pass string value instead.\", \" \"));\n};\nvar convertToNumberAttr = function (num) {\n    if ([Number.NaN, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY]\n        .map(function (val) { return val.toString(); })\n        .includes(num.toString())) {\n        throw new Error(\"Special numeric value \".concat(num.toString(), \" is not allowed\"));\n    }\n    else if (num > Number.MAX_SAFE_INTEGER) {\n        validateBigIntAndThrow(\"Number \".concat(num.toString(), \" is greater than Number.MAX_SAFE_INTEGER.\"));\n    }\n    else if (num < Number.MIN_SAFE_INTEGER) {\n        validateBigIntAndThrow(\"Number \".concat(num.toString(), \" is lesser than Number.MIN_SAFE_INTEGER.\"));\n    }\n    return { N: num.toString() };\n};\nvar isBinary = function (data) {\n    var binaryTypes = [\n        \"ArrayBuffer\",\n        \"Blob\",\n        \"Buffer\",\n        \"DataView\",\n        \"File\",\n        \"Int8Array\",\n        \"Uint8Array\",\n        \"Uint8ClampedArray\",\n        \"Int16Array\",\n        \"Uint16Array\",\n        \"Int32Array\",\n        \"Uint32Array\",\n        \"Float32Array\",\n        \"Float64Array\",\n        \"BigInt64Array\",\n        \"BigUint64Array\",\n    ];\n    if (data === null || data === void 0 ? void 0 : data.constructor) {\n        return binaryTypes.includes(data.constructor.name);\n    }\n    return false;\n};\n","import { __assign, __read, __values } from \"tslib\";\nexport var convertToNative = function (data, options) {\n    var e_1, _a;\n    try {\n        for (var _b = __values(Object.entries(data)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var _d = __read(_c.value, 2), key = _d[0], value = _d[1];\n            if (value !== undefined) {\n                switch (key) {\n                    case \"NULL\":\n                        return null;\n                    case \"BOOL\":\n                        return Boolean(value);\n                    case \"N\":\n                        return convertNumber(value, options);\n                    case \"B\":\n                        return convertBinary(value);\n                    case \"S\":\n                        return convertString(value);\n                    case \"L\":\n                        return convertList(value, options);\n                    case \"M\":\n                        return convertMap(value, options);\n                    case \"NS\":\n                        return new Set(value.map(function (item) { return convertNumber(item, options); }));\n                    case \"BS\":\n                        return new Set(value.map(convertBinary));\n                    case \"SS\":\n                        return new Set(value.map(convertString));\n                    default:\n                        throw new Error(\"Unsupported type passed: \".concat(key));\n                }\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    throw new Error(\"No value defined: \".concat(JSON.stringify(data)));\n};\nvar convertNumber = function (numString, options) {\n    if (options === null || options === void 0 ? void 0 : options.wrapNumbers) {\n        return { value: numString };\n    }\n    var num = Number(numString);\n    var infinityValues = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];\n    if ((num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) && !infinityValues.includes(num)) {\n        if (typeof BigInt === \"function\") {\n            try {\n                return BigInt(numString);\n            }\n            catch (error) {\n                throw new Error(\"\".concat(numString, \" can't be converted to BigInt. Set options.wrapNumbers to get string value.\"));\n            }\n        }\n        else {\n            throw new Error(\"\".concat(numString, \" is outside SAFE_INTEGER bounds. Set options.wrapNumbers to get string value.\"));\n        }\n    }\n    return num;\n};\nvar convertString = function (stringValue) { return stringValue; };\nvar convertBinary = function (binaryValue) { return binaryValue; };\nvar convertList = function (list, options) {\n    return list.map(function (item) { return convertToNative(item, options); });\n};\nvar convertMap = function (map, options) {\n    return Object.entries(map).reduce(function (acc, _a) {\n        var _b;\n        var _c = __read(_a, 2), key = _c[0], value = _c[1];\n        return (__assign(__assign({}, acc), (_b = {}, _b[key] = convertToNative(value, options), _b)));\n    }, {});\n};\n","export * from \"./convertToAttr\";\nexport * from \"./convertToNative\";\nexport * from \"./marshall\";\nexport * from \"./models\";\nexport * from \"./unmarshall\";\n","import { convertToAttr } from \"./convertToAttr\";\nexport var marshall = function (data, options) { return convertToAttr(data, options).M; };\n","export {};\n","import { convertToNative } from \"./convertToNative\";\nexport var unmarshall = function (data, options) {\n    return convertToNative({ M: data }, options);\n};\n","import { marshall, unmarshall } from '@aws-sdk/util-dynamodb';\r\n\r\nexport const saveGameToCloud = async (email, appName, timestamp, gameResult) => {\r\n\r\n    const dynamoGame = {\r\n      pk: email\r\n      , sk: `${appName}#${timestamp}`\r\n  \r\n      , ts: timestamp\r\n      , user: email\r\n      , app: appName\r\n  \r\n      , gsi1pk: appName\r\n      , gsi1sk: timestamp\r\n  \r\n      , game: gameResult\r\n    };\r\n  \r\n    console.log(\"Unmarshalled Game\", dynamoGame);\r\n\r\n    const marshalledGame = marshall(\r\n      dynamoGame\r\n      , {\r\n        removeUndefinedValues: true\r\n        , convertClassInstanceToMap: true\r\n      }\r\n    );\r\n  \r\n    console.log(\"MarshalledGame\", marshalledGame);\r\n  \r\n    const options = {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        TableName: \"tca-data\",\r\n        Item: marshalledGame\r\n      })  \r\n    };\r\n  \r\n    await fetch(\r\n      \"https://32wop75hhc.execute-api.us-east-1.amazonaws.com/prod/data\"\r\n      , options \r\n    );\r\n  };\r\n  \r\n  export const loadGamesFromCloud = async (email, appName) => {\r\n      \r\n    const url = `https://32wop75hhc.execute-api.us-east-1.amazonaws.com/prod/data/?user=${email}&game=${appName}`;\r\n    \r\n    console.log(\"url\", url);\r\n    \r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    \r\n    console.log(\"Marshalled Response\", data);\r\n    \r\n    const unmarshalledData = data.Items.map(x => unmarshall(x, {convertEmptyValues: true}));\r\n    \r\n    console.log(\"Unarshalled Response\", unmarshalledData);\r\n\r\n    const gameResults = unmarshalledData.map(x => x.game);\r\n    return gameResults;    \r\n  };\r\n  \r\n  ","import { Injectable } from '@angular/core';\r\nimport { Storage } from '@ionic/storage-angular';\r\nimport { saveGameToCloud, loadGamesFromCloud } from './TcaCloudApi';\r\n\r\nexport interface Player {\r\n  name: string;\r\n  order: number;\r\n}\r\n\r\ninterface GameResult {\r\n  start: string;\r\n  end: string;\r\n  winner: string;\r\n  players: Player[];\r\n}\r\n\r\ninterface CurrentGame {\r\n  start: string;\r\n  availablePlayers: Player[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GameService {\r\n\r\n  gameResults = [];\r\n\r\n  addGameResult = async (r: GameResult) => {\r\n    \r\n    this.gameResults = [\r\n      ...this.gameResults\r\n      , r\r\n    ];\r\n\r\n    // await this.storage.set(\"gameResults\", this.gameResults);\r\n    await saveGameToCloud(\r\n      this.emailAddress\r\n      , \"tca-foo-angular-ionic\"\r\n      , r.end\r\n      , r\r\n    );\r\n  };  \r\n\r\n  getUniquePlayers = () => (\r\n    [... new Set(this.gameResults.flatMap(x => x.players.map(y => y.name)))]\r\n  );\r\n\r\n  currentGame: CurrentGame = {\r\n    start: \"\"\r\n    , availablePlayers: [] \r\n  };\r\n\r\n  setCurrentGame = (g: CurrentGame) => {\r\n    this.currentGame = g;\r\n  };\r\n\r\n  calculateShortestGame = () => (\r\n    Math.min(\r\n        ...this.gameResults.map(x => Date.parse(x.end) - Date.parse(x.start))\r\n    )\r\n  );  \r\n\r\n  calculateLeaderboard = () => {\r\n\r\n    return this.getUniquePlayers().map(x => {\r\n\r\n        const userGamesPlayed = this.gameResults.filter(y => y.players.some(z => z.name === x));\r\n        const userGamesWon = userGamesPlayed.filter(y => y.winner === x);\r\n\r\n        return {\r\n            name: x\r\n            , wins: userGamesWon.length\r\n            , losses: userGamesPlayed.length - userGamesWon.length\r\n            , winningPercent: (userGamesWon.length / userGamesPlayed.length).toFixed(3)\r\n        };\r\n    }).sort(\r\n      (a, b) => a.winningPercent > b.winningPercent ? -1 : 1\r\n    );\r\n};\r\n\r\n  constructor(\r\n    private storageSvc: Storage\r\n  ) { \r\n    this.init();\r\n  }\r\n\r\n  private storage: Storage = undefined;\r\n\r\n  init = async () => {\r\n    this.storage = await this.storageSvc.create();\r\n    this.emailAddress = await this.storage.get(\"email\") ?? \"\";\r\n\r\n    if (this.emailAddress.length > 0) {\r\n      this.gameResults = await loadGamesFromCloud(this.emailAddress, \"tca-foo-angular-ionic\") ?? [];\r\n    }\r\n  };\r\n\r\n  emailAddress = \"\";\r\n\r\n  updateEmail = async (newEmailAddress) => {\r\n    this.emailAddress = await this.storage.set('email', newEmailAddress);\r\n    this.init();\r\n  };\r\n}\r\n"],"names":["marshall","unmarshall","saveGameToCloud","email","appName","timestamp","gameResult","dynamoGame","pk","sk","ts","user","app","gsi1pk","gsi1sk","game","console","log","marshalledGame","removeUndefinedValues","convertClassInstanceToMap","options","method","body","JSON","stringify","TableName","Item","fetch","loadGamesFromCloud","url","response","data","json","unmarshalledData","Items","map","x","convertEmptyValues","gameResults"],"sourceRoot":"webpack:///"}